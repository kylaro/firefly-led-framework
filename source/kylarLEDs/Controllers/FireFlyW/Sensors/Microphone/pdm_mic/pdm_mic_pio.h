// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------------- //
// pdm_microphone_data //
// ------------------- //

#define pdm_microphone_data_wrap_target 0
#define pdm_microphone_data_wrap 3

static const uint16_t pdm_microphone_data_program_instructions[] = {
            //     .wrap_target
    0xa042, //  0: nop                    side 0     
    0x4001, //  1: in     pins, 1         side 0     
    0x9040, //  2: push   iffull noblock  side 1     
    0xb042, //  3: nop                    side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pdm_microphone_data_program = {
    .instructions = pdm_microphone_data_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config pdm_microphone_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pdm_microphone_data_wrap_target, offset + pdm_microphone_data_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void pdm_microphone_data_init(PIO pio, uint sm, uint offset, float clk_div, uint data_pin, uint clk_pin) {
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);
    pio_sm_config c = pdm_microphone_data_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, clk_pin);
    sm_config_set_in_pins(&c, data_pin);
    pio_gpio_init(pio, clk_pin);
    pio_gpio_init(pio, data_pin);
    sm_config_set_in_shift(&c, false, false, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c, clk_div);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

